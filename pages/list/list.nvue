<template>
	<view class="pages">
		<!-- #ifndef H5 -->
		<statusBar></statusBar>
		<!-- #endif -->

		<!-- 搜索功能 -->
		<view class="uni-search-box">
			<uni-search-bar v-model="keyword" ref="searchBar" radius="100" cancelButton="none" disabled
				:placeholder="inputPlaceholder" />
			<view class="cover-search-bar" @click="searchClick"></view>
		</view>

		<unicloud-db ref='udb' v-slot:default="{data,pagination,hasMore, loading, error, options}" @error="onqueryerror"
			:collection="colList" :page-size="10">
			<!-- 基于 uni-list 的页面布局 field="user_id.username"-->
			<uni-list class="uni-list" :border="false" :style="{height:listHight}">

				<!-- 作用于app端nvue页面的下拉加载 -->
				<!-- #ifdef APP-NVUE -->
				<refreshBox @refresh="refresh" :loading="loading"></refreshBox>
				<!-- #endif -->

				<!-- 列表渲染 -->
				<!-- 	<uni-list-item :to="'/pages/list/detail?id='+item._id+'&title='+item.title" v-for="(item,index) in data" :key="index">

					<template v-slot:header>
						<image class="avatar" :src="item.avatar" mode="aspectFill"></image>
					</template>
		
					<template v-slot:body>
						<view class="main">
							<text class="title">{{item.title}}</text>
							<view class="info">
								<text class="author">{{item.user_id[0]?item.user_id[0].username:''}}</text>
								<uni-dateformat class="last_modify_date" :date="item.last_modify_date"
									format="yyyy-MM-dd" :threshold="[60000, 2592000000]" />
							</view>
						</view>
					</template>
				</uni-list-item> -->
				<!-- 文件流 -->
				<template>
					<view class="containerOutsider">
						<view class="left">
							<view class="card" @click="cardHandleClick(item)" v-for="(item,index) in leftList" :key="index">
								<image class="imageInSide" alt="" :src="item.src" mode="widthFix"></image>
								<view class="cardBottom">
									<div class="lineInside">
										<span class="wordBlack">
											{{item.title}}
										</span>
									</div>
									<div class="lineInside">
										<span class="wordRed">
											￥{{item.price || ""}}
										</span>
									</div>
									<div class="lineInsideLast">
										<img class="avatarInside" :src="item.avatar" alt="">
										<span class="wordGrey">
											{{item.userName}}
										</span>
									</div>
								</view>

							</view>

						</view>
						<view class="right">
							<view class="card" @click="cardHandleClick(item)" v-for="(item,index) in rightList" :key="index">
								<image class="imageInSide" alt="" :src="item.src" mode="widthFix"></image>
								<view class="cardBottom">
									<div class="lineInside">
										<span class="wordBlack">
											{{item.title}}
										</span>
									</div>
									<div class="lineInside">
										<span class="wordRed">
											￥{{item.price || ""}}
										</span>
									</div>
									<div class="lineInsideLast">
										<img class="avatarInside" :src="item.avatar" alt="">
										<span class="wordGrey">
											{{item.userName}}
										</span>
									</div>

								</view>
							</view>
						</view>
					</view>
				</template>
				<!-- 加载状态：上拉加载更多，加载中，没有更多数据了，加载错误 -->
				<!-- #ifdef APP-PLUS -->
				<uni-list-item>
					<template v-slot:body>
						<!-- #endif -->
						<uni-load-state @networkResume="getCardsInfo" :state="{data,pagination,hasMore, loading, error}"
							@loadMore="getCardsInfo">
						</uni-load-state>
						<!-- #ifdef APP-PLUS -->
					</template>
				</uni-list-item>
				<!-- #endif -->
			</uni-list>
		</unicloud-db>
	</view>
</template>

<script>
	let cdbRef;
	import statusBar from "@/uni_modules/uni-nav-bar/components/uni-nav-bar/uni-status-bar";

	import Gps from '@/uni_modules/json-gps/js_sdk/gps.js';
	const gps = new Gps(),
		db = uniCloud.database();

	export default {
		components: {
			statusBar
		},
		computed: {
			inputPlaceholder(e) {
				if (uni.getStorageSync('CURRENT_LANG') == "en") {
					return 'Please enter the search content'
				} else {
					return '请输入搜索内容'
				}
			},
			colList() {
				return [
					db.collection('opendb-news-articles').where(this.where).field(
						'avatar,title,last_modify_date,user_id').getTemp(),
					db.collection('uni-id-users').field('_id,username').getTemp()
				]
			}
		},
		data() {
			return {
				list: [],
				leftList: [],
				rightList: [],

				leftH: 0,
				rightH: 0,

				where: '"article_status" == 1',
				keyword: "",
				showRefresh: false,
				listHight: 0,
				
				// 瀑布流请求的次数
				requestTime:0,
				// 退出小程序的返回次数
				backButtonPress:0,
			}
		},
		watch: {
			keyword(keyword, oldValue) {
				let where = '"article_status" == 1 '
				if (keyword) {
					this.where = where + `&& /${keyword}/.test(title)`;
				} else {
					this.where = where;
				}
			}
		},
		async onReady() {
			// #ifdef APP-NVUE
			/* 可用窗口高度 - 搜索框高 - 状态栏高 */
			this.listHight = uni.getSystemInfoSync().windowHeight - uni.getSystemInfoSync().statusBarHeight - 50 +
			'px';
			// #endif
			// #ifndef APP-NVUE
			this.listHight = 'auto'
			// #endif
			cdbRef = this.$refs.udb
		},
		async onShow() {
			this.keyword = getApp().globalData.searchText
			getApp().globalData.searchText = ''
		
		},
		
		
		// 进入界面
		onLoad() {
			console.log("进入界面",getApp().globalData.searchText)
			this.getCardsInfo()	
			
		},
		
		onBackPress(options) {  
			this.backButtonPress++;
			if (this.backButtonPress > 1) { 
				plus.runtime.quit();
			} else {
				plus.nativeUI.toast('再按一次退出应用');
			} 
			setTimeout(()=> {
				this.backButtonPress = 0;
			}, 1000);
			return true;
		},

		methods: {
			// 处理瀑布流
			doList() {
				const that = this
				this.list.forEach(res => {
					// 获取图片宽高
					uni.getImageInfo({
						src: res.src,
						success: (image) => {

							// 计算图片渲染高度
							let showH = (50 * image.height) / image.width
							// 判断左右盒子高度
							if (that.leftH <= that.rightH) {
								that.leftList.push(res)
								that.leftH += showH

							} else {
								that.rightList.push(res)
								that.rightH += showH

							}
						}
					})
				})
			},
			
			// 获取卡片中的内容
			async getCardsInfo(){
				const secondHandList = uniCloud.importObject('secondHandList')
				let res = await secondHandList.getCardsInfo(this.requestTime,getApp().globalData.searchText)
				if(res.errCode==0){
					this.requestTime = this.requestTime+1
					this.list = res.data
					this.doList()
				}
				
			},
			
			// 进行搜索
			searchCardsInfo(){
				
			},
			
			
			
			// 点击卡片
			cardHandleClick(item){
				// this.$router.push('/pages/list/detail?id='+item._id+'&title='+item.title)
				uni.navigateTo({
					url: '/pages/list/detail?id='+item._id+'&title='+item.title,
					animationType: 'fade-in'
				})
			},

			searchClick(e) { //点击搜索框
				uni.hideKeyboard();
				uni.redirectTo({
					url: '/pages/list/search/search',
					animationType: 'fade-in'
				});
			},
			retry() {
				this.refresh()
			},
			refresh(){
				this.getCardsInfo()	
			},
			loadMore() {
				this.getCardsInfo()
			},
			onqueryerror(e) {
				console.error(e);
			},
			onpullingdown(e) {
				console.log(e);
				this.showRefresh = true
				if (e.pullingDistance > 100) {
					this.refresh()
				}
			}
		},
		// #ifndef APP-NVUE
		onPullDownRefresh() {
			this.refresh()
		},
		onReachBottom() {
			this.loadMore()
		}
		// #endif
	}
</script>

<style lang="scss" scoped>
	/* #ifndef APP-NVUE */
	view {
		display: flex;
		box-sizing: border-box;
		flex-direction: column;
	}

	/* #endif */
	.pages {
		background-color: #FFFFFF;
	}

	.avatar {
		width: 200rpx;
		height: 200rpx;
		margin-right: 10rpx;
	}

	.main {
		justify-content: space-between;
		flex: 1;
	}

	.title {
		font-size: 16px;
	}

	.info {
		flex-direction: row;
		justify-content: space-between;
	}

	.author,
	.last_modify_date {
		font-size: 14px;
		color: #999999;
	}

	.uni-search-box {
		background-color: #FFFFFF;
		position: sticky;
		height: 50px;
		top: 0;
		left: 0;
		/* #ifndef APP-PLUS */
		z-index: 9;
		/* #endif */
		/* #ifdef MP-WEIXIN */
		// width: 580rpx;
		width: 100%;
		/* #endif */
	}

	.cover-search-bar {
		height: 50px;
		position: relative;
		top: -50px;
		margin-bottom: -50px;
		/* #ifndef APP-NVUE */
		z-index: 999;
		/* #endif */
	}

	/* 瀑布流样式 */
	.containerOutsider {
		padding: 0 30rpx;
		font-size: 14rpx;
		line-height: 24rpx;
		width: 100%;
		display: flex;
		flex-wrap: nowrap;
		flex-direction: row;

		.left {
			width: 48%;
			vertical-align: top;
			margin-right: 4%;


		}

		.right {
			width: 48%;
			vertical-align: top;


		}
	}



	.card {
		border-radius: 10rpx;
		margin-bottom: 10rpx;
		overflow: hidden;

		.imageInSide {
			width: 100%;
			display: block;
			margin-bottom: 0;
		}

		.cardBottom {
			height: 160rpx;
			width: 100%;
			border: aliceblue 1px solid;

			.lineInside {
				height: 40rpx;
				width: 100%;
				overflow: hidden;
				text-overflow: ellipsis;
				white-space: nowrap;

			}

			.lineInsideLast {
				height: 60rpx;
				width: 100%;
				overflow: hidden;
				text-overflow: ellipsis;
				white-space: nowrap;
			}

			.wordBlack {
				padding-left: 10rpx;
				font-size: 24rpx;
				line-height: 40rpx;
				height: 40rpx;
				width: 100%;
				color: #000;
				font-weight: 700;
				overflow: hidden;
				text-overflow: ellipsis;
				white-space: nowrap;
			}

			.wordRed {
				padding-left: 10rpx;
				font-size: 24rpx;
				line-height: 40rpx;
				color: red;
				font-weight: 700;
			}

			.avatarInside {
				height: 40rpx;
				width: 40rpx;
				line-height: 60rpx;
				border-radius: 50%;
				padding-left: 10rpx;
				vertical-align: middle
			}

			.wordGrey {
				padding-left: 10rpx;
				font-size: 10rpx;
				line-height: 60rpx;
				color: grey;
			}
		}
	}
</style>
